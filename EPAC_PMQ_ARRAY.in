# 10 PMQ EPAC PMQ Array 
# Used as a test for error analysis 

# Beam parameters for EPAC 10 PMQ
N      =  1e4 ;    # Total number of particles
Qtotal = -100e-12 ;   # Total charge [C]

# mec2 in eV
meeV = (me*c*c)/(-qe);

meanEnergy  = 1000e6 ; # Average energy [eV]

stdEnergy   = 10e6 ;  # rms energy spread [eV]
chirpEnergy = 1 ;    # Linear energy chirp [m^-1]

emitX  = 5.107e-10/sqrt(2) ;     # rms emittance [m-rad] (non-normalised)
emitY  = 5.107e-10/sqrt(2) ;
alphaX = 0;
alphaY = 0;
betaX = 0.005;
betaY = 0.005;

sigZ   = 10e-15*c ;    # rms bunch length [m] (usually 3e-6) 9e-4 is 3 ps


# Derived parameters
gamma = 1+|qe|*meanEnergy/(me*c*c) ;
gammabeta = sqrt(gamma^2 - 1) ;
beta  = sqrt(1-gamma^-2) ;

sig_x  = sqrt(betaX*emitX) ;
sig_y  = sqrt(betaY*emitY) ;
sig_px = sqrt(emitX/betaX) ;
sig_py = sqrt(emitY/betaY) ;

# Position particles
setparticles("beam", N, me, qe, Qtotal) ;
setxdist("beam","g",0, sig_x, 3,3) ;
setydist("beam","g",0, sig_y, 3,3) ; 
setGBxdist("beam","g",0, sig_px, 3,3) ;
setGBydist("beam","g",0, sig_py, 3,3) ;

setzdist("beam","g",0, sigZ, 3,3) ;
setGdist("beam","g",gamma, |qe|*stdEnergy/(me*c*c), 3,3) ;

#addxdiv("beam",0,-gammabeta*alphaX/betaX) ;
#addydiv("beam",0,-gammabeta*alphaY/betaY) ;
addxdiv("beam",0,-gammabeta/betaX) ;
addydiv("beam",0,-gammabeta/betaY) ;
addzdiv("beam",0,-(me*c*c/|qe|)*(gamma-1)*chirpEnergy) ;

# Notes:
# Start using time distribution : Use 'settdist' instead of 'setzdist'
# Start at some other fixed time: Use 'setextrapolate'
# Twiss parameters will be off in case of excessive (correlated) energy spread

#-----------------------------------------------
# SETTINGS
#-----------------------------------------------
accuracy(6); # accuracy(7);
#dtmax = 10e-12;
#writesteps();
#writeelegant();

#spacecharge3Dmesh();

#----------
# BEAMLINE
#----------
LPMQ = 0.05;
GPMQ = 500;

quadrupole("wcs","z",0.045,LPMQ,GPMQ); # HQUADF1

quadrupole("wcs","z",0.145,LPMQ,-GPMQ); # HQUADD1

quadrupole("wcs","z",0.245,LPMQ,GPMQ); # HQUADF2

quadrupole("wcs","z",0.345,LPMQ,-GPMQ); # HQUADD2

quadrupole("wcs","z",0.445,LPMQ,GPMQ); # HQUADF3

quadrupole("wcs","z",0.545,LPMQ,-GPMQ); # HQUADD3

quadrupole("wcs","z",0.645,LPMQ,GPMQ); # HQUADF4

quadrupole("wcs","z",0.745,LPMQ,-GPMQ); # HQUADD4

quadrupole("wcs","z",0.845,LPMQ,GPMQ); # HQUADF5

quadrupole("wcs","z",0.945,LPMQ,-GPMQ); # HQUADD5

#--------------------------------------------
# OUTPUT - SPECTROMETER OFF 
#--------------------------------------------
# TIME
tout(0,0.99/(beta*c),0.01/(beta*c));
tout(0.99/(beta*c)); # screen end

# POSITION
screen("wcs", "I", 0, 0.99, 0.01);