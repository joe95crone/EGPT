# 10 PMQ EPAC PMQ Array 
# Used as a test for error analysis 

# Beam parameters for EPAC 10 PMQ
N      =  1e4 ;    # Total number of particles
Qtotal = -100e-12 ;   # Total charge [C]

# mec2 in eV
meeV = (me*c*c)/(-qe);

meanEnergy  = 1000e6 ; # Average energy [eV]

stdEnergy   = 10e6 ;  # rms energy spread [eV]
chirpEnergy = 1 ;    # Linear energy chirp [m^-1]

emitX  = 5.107e-10/sqrt(2) ;     # rms emittance [m-rad] (non-normalised)
emitY  = 5.107e-10/sqrt(2) ;
alphaX = 0;
alphaY = 0;
betaX = 0.005;
betaY = 0.005;

sigZ   = 10e-15*c ;    # rms bunch length [m] (usually 3e-6) 9e-4 is 3 ps


# Derived parameters
gamma = 1+|qe|*meanEnergy/(me*c*c) ;
gammabeta = sqrt(gamma^2 - 1) ;
beta  = sqrt(1-gamma^-2) ;

sig_x  = sqrt(betaX*emitX) ;
sig_y  = sqrt(betaY*emitY) ;
sig_px = sqrt(emitX/betaX) ;
sig_py = sqrt(emitY/betaY) ;

# Position particles
setparticles("beam", N, me, qe, Qtotal) ;
setxdist("beam","g",0, sig_x, 3,3) ;
setydist("beam","g",0, sig_y, 3,3) ; 
setGBxdist("beam","g",0, sig_px, 3,3) ;
setGBydist("beam","g",0, sig_py, 3,3) ;

setzdist("beam","g",0, sigZ, 3,3) ;
setGdist("beam","g",gamma, |qe|*stdEnergy/(me*c*c), 3,3) ;

#addxdiv("beam",0,-gammabeta*alphaX/betaX) ;
#addydiv("beam",0,-gammabeta*alphaY/betaY) ;
addxdiv("beam",0,-gammabeta/betaX) ;
addydiv("beam",0,-gammabeta/betaY) ;
addzdiv("beam",0,-(me*c*c/|qe|)*(gamma-1)*chirpEnergy) ;

# Notes:
# Start using time distribution : Use 'settdist' instead of 'setzdist'
# Start at some other fixed time: Use 'setextrapolate'
# Twiss parameters will be off in case of excessive (correlated) energy spread

#-----------------------------------------------
# SETTINGS
#-----------------------------------------------
accuracy(6); # accuracy(7);
#dtmax = 10e-12;
#writesteps();
#writeelegant();

#spacecharge3Dmesh();

#----------
# BEAMLINE
#----------
LPMQ = 0.05;
GPMQ = 500;

quadrupole("wcs",0 + dx1,0 + dy1,0.045 + dz1,cos(th1),-sin(th1),0,sin(th1),cos(th1),0,f_11_1*LPMQ + d_11_1,f_12_1*GPMQ + d_12_1);

quadrupole("wcs",0 + dx2,0 + dy2,0.145 + dz2,cos(th2),-sin(th2),0,sin(th2),cos(th2),0,f_11_2*LPMQ + d_11_2,f_12_2*-GPMQ + d_12_2);

quadrupole("wcs",0 + dx3,0 + dy3,0.245 + dz3,cos(th3),-sin(th3),0,sin(th3),cos(th3),0,f_11_3*LPMQ + d_11_3,f_12_3*GPMQ + d_12_3);

quadrupole("wcs",0 + dx4,0 + dy4,0.345 + dz4,cos(th4),-sin(th4),0,sin(th4),cos(th4),0,f_11_4*LPMQ + d_11_4,f_12_4*-GPMQ + d_12_4);

quadrupole("wcs",0 + dx5,0 + dy5,0.445 + dz5,cos(th5),-sin(th5),0,sin(th5),cos(th5),0,f_11_5*LPMQ + d_11_5,f_12_5*GPMQ + d_12_5);

quadrupole("wcs",0 + dx6,0 + dy6,0.545 + dz6,cos(th6),-sin(th6),0,sin(th6),cos(th6),0,f_11_6*LPMQ + d_11_6,f_12_6*-GPMQ + d_12_6);

quadrupole("wcs",0 + dx7,0 + dy7,0.645 + dz7,cos(th7),-sin(th7),0,sin(th7),cos(th7),0,f_11_7*LPMQ + d_11_7,f_12_7*GPMQ + d_12_7);

quadrupole("wcs",0 + dx8,0 + dy8,0.745 + dz8,cos(th8),-sin(th8),0,sin(th8),cos(th8),0,f_11_8*LPMQ + d_11_8,f_12_8*-GPMQ + d_12_8);

quadrupole("wcs",0 + dx9,0 + dy9,0.845 + dz9,cos(th9),-sin(th9),0,sin(th9),cos(th9),0,f_11_9*LPMQ + d_11_9,f_12_9*GPMQ + d_12_9);

quadrupole("wcs",0 + dx10,0 + dy10,0.945 + dz10,cos(th10),-sin(th10),0,sin(th10),cos(th10),0,f_11_10*LPMQ + d_11_10,f_12_10*-GPMQ + d_12_10);

#--------------------------------------------
# OUTPUT - SPECTROMETER OFF 
#--------------------------------------------
# TIME
tout(0,0.99/(beta*c),0.01/(beta*c));
tout(0.99/(beta*c)); # screen end

# POSITION
screen("wcs", "I", 0, 0.99, 0.01);